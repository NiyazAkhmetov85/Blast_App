import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

from utils.session_state_manager import SessionStateManager
from utils.logs_manager import LogsManager

class ResultsDisplay:
    def __init__(self, session_manager: SessionStateManager, logs_manager: LogsManager):
        self.session_manager = session_manager
        self.logs_manager = logs_manager
        self.block_name = st.session_state.get("block_name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")

    def display_psd_table(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã PSD —Å —Ä–∞—Å—á–µ—Ç–Ω—ã–º–∏ –∏ —ç—Ç–∞–ª–æ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ session_state
            if "P_x_data" not in st.session_state or st.session_state["P_x_data"] is None:
                st.sidebar.warning("‚ùå –î–∞–Ω–Ω—ã–µ PSD –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
                self.logs_manager.add_log(module="results_display", event="–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –î–∞–Ω–Ω—ã–µ PSD –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", log_type="–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
                return
                
            # df = st.session_state["P_x_data"].copy()
            # psd_table
            df = st.session_state["psd_table"].copy()
            df_sorted = df.sort_values(by="–†–∞–∑–º–µ—Ä —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ (x), –º–º", ascending=False)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
            required_columns = {"–†–∞–∑–º–µ—Ä —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ (x), –º–º", "–≠—Ç–∞–ª–æ–Ω–Ω—ã–µ P(x), %", "–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ P(x), %"}
            if not required_columns.issubset(df.columns):
                st.sidebar.error("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö PSD.")
                self.logs_manager.add_log(module="results_display", event="–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö PSD", log_type="–æ—à–∏–±–∫–∞")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –ø—É—Å—Ç –ª–∏ DataFrame
            if df.empty:
                st.sidebar.warning("‚ö† –¢–∞–±–ª–∏—Ü–∞ PSD –ø—É—Å—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–æ–≤.")
                self.logs_manager.add_log(module="results_display", event="–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –¢–∞–±–ª–∏—Ü–∞ PSD –ø—É—Å—Ç–∞", log_type="–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π P(x)
            if (df["–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ P(x), %"] < 0).any() or (df["–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ P(x), %"] > 100).any():
                st.sidebar.warning("‚ö† –ù–∞–π–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ä–∞—Å—á–µ—Ç–Ω—ã—Ö P(x). –ó–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, 100]%.")
                self.logs_manager.add_log(module="results_display", event="–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ P(x)", log_type="–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")

            # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª–æ–∫–µ –∏ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö
            x_max = st.session_state.get("target_x_max", "N/A")
            x_50 = st.session_state.get("target_x_50", "N/A")

            st.write(f"### –¢–∞–±–ª–∏—Ü–∞ PSD - {self.block_name}")
            st.write(f"**–≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**  x_max: {x_max}, X_50: {x_50}")

            # –í—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            st.dataframe(df_sorted.style.format({
                "–†–∞–∑–º–µ—Ä —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ (x), –º–º": "{:.2f}",
                "–≠—Ç–∞–ª–æ–Ω–Ω—ã–µ P(x), %": "{:.2f}",
                "–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ P(x), %": "{:.2f}"
            }))

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            self.logs_manager.add_log(module="results_display", event="‚úÖ –¢–∞–±–ª–∏—Ü–∞ PSD —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞", log_type="—É—Å–ø–µ—Ö")

        except Exception as e:
            self.logs_manager.add_log(module="results_display", event=f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã PSD: {str(e)}", log_type="–æ—à–∏–±–∫–∞")
            st.sidebar.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã PSD: {e}")

    def display_cumulative_curve(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–π –∫—Ä–∏–≤–æ–π —Å –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ–º x_max, X_50."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ session_state
            if "P_x_data" not in st.session_state or st.session_state["P_x_data"] is None:
                st.sidebar.warning("‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–π –∫—Ä–∏–≤–æ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
                self.logs_manager.add_log(module="results_display", event="–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–π –∫—Ä–∏–≤–æ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", log_type="–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
                return

            # df = st.session_state["P_x_data"].copy()
            df = st.session_state["psd_table"].copy()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
            required_columns = {"–†–∞–∑–º–µ—Ä —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ (x), –º–º", "–≠—Ç–∞–ª–æ–Ω–Ω—ã–µ P(x), %", "–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ P(x), %"}
            if not required_columns.issubset(df.columns):
                st.sidebar.error("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö PSD.")
                self.logs_manager.add_log(module="results_display", event="–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö PSD", log_type="–æ—à–∏–±–∫–∞")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –ø—É—Å—Ç –ª–∏ DataFrame
            if df.empty:
                st.sidebar.warning("‚ö† –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–π –∫—Ä–∏–≤–æ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
                self.logs_manager.add_log(module="results_display", event="–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ü—É—Å—Ç–æ–π DataFrame –¥–ª—è –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–π –∫—Ä–∏–≤–æ–π", log_type="–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π P(x)
            if (df["–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ P(x), %"] < 0).any() or (df["–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ P(x), %"] > 100).any():
                st.sidebar.warning("‚ö† –ù–∞–π–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ä–∞—Å—á–µ—Ç–Ω—ã—Ö P(x). –ó–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, 100]%.")
                self.logs_manager.add_log(module="results_display", event="–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ P(x)", log_type="–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            x_max = st.session_state.get("target_x_max", None)
            x_50 = st.session_state.get("target_x_50", None)

            # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            plt.figure(figsize=(8, 6))
            plt.plot(df["–†–∞–∑–º–µ—Ä —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ (x), –º–º"], df["–≠—Ç–∞–ª–æ–Ω–Ω—ã–µ P(x), %"], label="–≠—Ç–∞–ª–æ–Ω–Ω—ã–µ P(x)", linestyle="-", marker="o", color="blue")
            plt.plot(df["–†–∞–∑–º–µ—Ä —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ (x), –º–º"], df["–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ P(x), %"], label="–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ P(x)", linestyle="--", marker="s", color="red")

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π –¥–ª—è x_max, x_50 (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω—ã)
            if x_max is not None:
                plt.axvline(x=x_max, color='purple', linestyle=':', label='x_max')
            if x_50 is not None:
                plt.axvline(x=x_50, color='orange', linestyle=':', label='X_50')

            plt.xlabel("–†–∞–∑–º–µ—Ä —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞, –º–º")
            plt.ylabel("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è, %")
            plt.title(f"üìà –ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –∫—Ä–∏–≤–∞—è - {self.block_name}")
            plt.legend()
            plt.grid(True, linestyle="--", linewidth=0.5)
            st.pyplot(plt)  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            plt.close()  # –ó–∞–∫—Ä—ã—Ç–∏–µ —Ñ–∏–≥—É—Ä—ã –ø–æ—Å–ª–µ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ (–∏–∑–±–µ–≥–∞–µ—Ç —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏)

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            self.logs_manager.add_log(module="results_display", event="‚úÖ –ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –∫—Ä–∏–≤–∞—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞", log_type="—É—Å–ø–µ—Ö")

        except Exception as e:
            self.logs_manager.add_log(module="results_display", event=f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–π –∫—Ä–∏–≤–æ–π: {str(e)}", log_type="–æ—à–∏–±–∫–∞")
            st.sidebar.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–π –∫—Ä–∏–≤–æ–π: {e}")
