import streamlit as st
from modules.data_input import DataInput
from utils.session_state_manager import SessionStateManager
from utils.logs_manager import LogsManager

def show_reference_values():
    """
    –≠–∫—Ä–∞–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ë–í–†.
    """
    st.header("üìå –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ë–í–†")

    session_manager = SessionStateManager()
    logs_manager = LogsManager()
    
    # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º DataInput –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    data_input = DataInput(session_manager, logs_manager)

    # ‚úÖ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–º–µ–Ω–∏ –±–ª–æ–∫–∞
    block_name = st.session_state.get("block_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–ª–æ–∫")

    if not block_name or block_name == "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–ª–æ–∫":
        st.warning("–ë–ª–æ–∫ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –±–ª–æ–∫ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–∞'.")
    else:
        st.info(f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–ª–æ–∫: **{block_name}**")

    # # ‚úÖ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á–µ—Ä–µ–∑ DataInput
    # data_input.render_parameters_section(["–≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏"])

    # # ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∫–∞–ª—ã –∑–Ω–∞—á–µ–Ω–∏–π
    # st.subheader("üìè –¢–∏–ø —à–∫–∞–ª—ã")
    # scale_type = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —à–∫–∞–ª—ã:", ["–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è", "–õ–∏–Ω–µ–π–Ω–∞—è"], index=0)

    # step_size = None
    # if scale_type == "–õ–∏–Ω–µ–π–Ω–∞—è":
    #     step_size = st.number_input("–í–≤–µ–¥–∏—Ç–µ —à–∞–≥ –¥–ª—è –ª–∏–Ω–µ–π–Ω–æ–π —à–∫–∞–ª—ã:", min_value=0.1, max_value=10.0, value=1.0, step=0.1)

    # # ‚úÖ –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –µ–¥–∏–Ω—ã–º —Å—Ç–∏–ª–µ–º
    # col1, col2 = st.columns(2)

    # with col1:
    #     if st.button("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —à–∫–∞–ª—É", use_container_width=True):
    #         data_input.generate_scale(scale_type, step_size)
    #         logs_manager.add_log("reference_values", f"–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —à–∫–∞–ª–∞: {scale_type}, —à–∞–≥: {step_size}", "—É—Å–ø–µ—Ö")
    #         st.success(f"‚úÖ –®–∫–∞–ª–∞ {scale_type} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")

    # with col2:
    #     if st.button("üìà –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", use_container_width=True):
    #         data_input.calculate_p_x()
    #         data_input.update_psd_table()
    #         logs_manager.add_log("reference_values", "–í—ã–ø–æ–ª–Ω–µ–Ω –ø–µ—Ä–µ—Å—á–µ—Ç —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π", "—É—Å–ø–µ—Ö")
    #         st.success("‚úÖ –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã!")

    # # ‚úÖ –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    # if st.button("‚úÖ –£—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", use_container_width=True):
    #     data_input.confirm_parameters()
    #     logs_manager.add_log("reference_values", "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã", "—É—Å–ø–µ—Ö")
    #     st.success("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã!")








# import streamlit as st
# from modules.reference_parameters import ReferenceParameters
# from modules.reference_calculations import ReferenceCalculations
# from utils.session_state_manager import SessionStateManager
# from utils.logs_manager import LogsManager

# def show_reference_values():
#     """
#     –≠–∫—Ä–∞–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ë–í–†.
#     """
#     st.header("–≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ë–í–†")

#     session_manager = SessionStateManager()
#     logs_manager = LogsManager()
    
#     # ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Ä–∞—Å—á–µ—Ç—ã
#     reference_params = ReferenceParameters(session_manager, logs_manager)
#     reference_calculations = ReferenceCalculations(session_manager, logs_manager)

#     # ‚úÖ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞
#     block_name = session_manager.get_state("current_block", "–ù–µ –∑–∞–¥–∞–Ω")
#     st.info(f"–¢–µ–∫—É—â–∏–π –±–ª–æ–∫: **{block_name}**")

#     # ‚úÖ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
#     render_reference_parameters(reference_params)

#     # ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∫–∞–ª—ã –∑–Ω–∞—á–µ–Ω–∏–π
#     st.subheader("üìè –¢–∏–ø —à–∫–∞–ª—ã")
#     scale_type = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —à–∫–∞–ª—ã:", ["–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è", "–õ–∏–Ω–µ–π–Ω–∞—è"], index=0)

#     # ‚úÖ –ï—Å–ª–∏ –ª–∏–Ω–µ–π–Ω–∞—è —à–∫–∞–ª–∞ ‚Äì –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —à–∞–≥
#     step_size = None
#     if scale_type == "–õ–∏–Ω–µ–π–Ω–∞—è":
#         step_size = st.number_input("–í–≤–µ–¥–∏—Ç–µ —à–∞–≥ –¥–ª—è –ª–∏–Ω–µ–π–Ω–æ–π —à–∫–∞–ª—ã:", min_value=0.1, max_value=10.0, value=1.0, step=0.1)

#     if st.button("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —à–∫–∞–ª—É"):
#         reference_calculations.generate_scale(scale_type, step_size)
#         logs_manager.add_log("reference_values", f"–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —à–∫–∞–ª–∞: {scale_type}, —à–∞–≥: {step_size}", "—É—Å–ø–µ—Ö")
#         st.success(f"‚úÖ –®–∫–∞–ª–∞ {scale_type} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")

#     # ‚úÖ –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞–º–∏
#     st.subheader("üìä –†–∞—Å—á–µ—Ç —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
#     if st.button("üìà –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"):
#         reference_calculations.calculate_p_x()
#         reference_calculations.update_psd_table()
#         logs_manager.add_log("reference_values", "–í—ã–ø–æ–ª–Ω–µ–Ω –ø–µ—Ä–µ—Å—á–µ—Ç —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π", "—É—Å–ø–µ—Ö")
#         st.success("‚úÖ –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã!")

#     if st.button("‚úÖ –£—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"):
#         reference_params.confirm_parameters()
#         logs_manager.add_log("reference_values", "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã", "—É—Å–ø–µ—Ö")
#         st.success("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã!")

# def render_reference_parameters(reference_params):
#     """
#     –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.
#     """
#     st.subheader("üìù –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")

#     # ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
#     ref_values = reference_params.get_reference_values()

#     if not ref_values:
#         st.warning("‚ö† –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
#         return

#     # ‚úÖ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
#     updated_values = {}
#     for category, params in ref_values.items():
#         with st.expander(f"üìå {category}", expanded=False):
#             for param, value in params.items():
#                 updated_values[f"{category}_{param}"] = st.number_input(
#                     f"{param}", value=value, key=f"ref_{category}_{param}"
#                 )

#     # ‚úÖ –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
#     if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
#         save_changes(reference_params, updated_values)

# def save_changes(reference_params, updated_values):
#     """
#     –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö.
#     """
#     updated_dict = {}
#     for key, value in updated_values.items():
#         category, param = key.split("_", 1)
#         if category not in updated_dict:
#             updated_dict[category] = {}
#         updated_dict[category][param] = value

#     reference_params.set_reference_values(updated_dict)
#     st.success("‚úÖ –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
