import streamlit as st
from modules.data_processing import DataProcessing
from modules.grid_generator import GridGenerator
from modules.visualization import Visualization
from ui.input_form import InputForm
from utils.session_state_manager import SessionStateManager
from utils.logs_manager import LogsManager

class DataInput:
    def __init__(self, session_manager: SessionStateManager, logs_manager: LogsManager):
        self.session_manager = session_manager
        self.logs_manager = logs_manager
        self.data_processor = DataProcessing(session_manager, logs_manager)
        self.grid_generator = GridGenerator(session_manager, logs_manager)
        self.visualizer = Visualization(session_manager, logs_manager)
        self.input_form = InputForm(session_manager, logs_manager)

    def show_import_block(self):
        """
        –≠–∫—Ä–∞–Ω –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∏ –Ω–∞—á–∞–ª—å–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –±–ª–æ–∫–∞.
        """
        st.header("–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–∞")
    
        # üîπ –ó–∞–≥—Ä—É–∑—á–∏–∫ —Ñ–∞–π–ª–∞ (–¥–æ—Å—Ç—É–ø–µ–Ω —Å—Ä–∞–∑—É, –±–µ–∑ –∫–Ω–æ–ø–∫–∏)
        uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –∫–æ–Ω—Ç—É—Ä–æ–º –±–ª–æ–∫–∞", type=["str", "csv", "txt"])
    
        # üîπ –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É          
        if uploaded_file is not None:
            self.data_processor.load_block_contour(uploaded_file)
            st.session_state["show_file_uploader"] = False  # –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏

            #     # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ DataFrame
            # if "block_contour" in st.session_state and not st.session_state["block_contour"].empty:
            #     df = st.session_state["block_contour"]
            #     st.subheader("–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            #     st.write(df)
            # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            if "block_contour" not in st.session_state:
                st.session_state["block_contour"] = pd.DataFrame({
                    'Column 1': [1, 2, 3],
                    'Column 2': [4, 5, 6],
                    'Column 3': [7, 8, 9]
                })
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ CSS –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∏—Ä–∏–Ω—ã —Ç–∞–±–ª–∏—Ü—ã
            st.markdown(
                """
                <style>
                .dataframe {
                    width: 40%; /* –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —à–∏—Ä–∏–Ω—É */
                    margin: auto; /* –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã */
                }
                </style>
                """,
                unsafe_allow_html=True
            )
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ DataFrame
            if "block_contour" in st.session_state and not st.session_state["block_contour"].empty:
                df = st.session_state["block_contour"]
                st.subheader("–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                st.write(df)
 

        # –ö–Ω–æ–ø–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –±–ª–æ–∫–∞
        if st.button("–í–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–ª–æ–∫") and "block_contour" in st.session_state:
            self.visualizer.plot_block_contour()

        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–∞
        if st.button("–û—á–∏—Å—Ç–∏—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∏ —É–¥–∞–ª–∏—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–ª–æ–∫"):
            self.data_processor.clear_block_data()
            self.visualizer.clear_visualization()
            st.session_state.pop("block_name", None)
            st.session_state.pop("block_contour", None)

    def show_input_form(self):
        """
        –≠–∫—Ä–∞–Ω –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∫–∏ —Å–∫–≤–∞–∂–∏–Ω.
        """
        st.header("–í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –≤—ã–±–æ—Ä —Å–µ—Ç–∫–∏")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–º–µ–Ω–∏ –±–ª–æ–∫–∞
        block_name = st.session_state.get("block_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–ª–æ–∫")

        if not block_name or block_name == "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–ª–æ–∫":
            st.warning("–ë–ª–æ–∫ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –±–ª–æ–∫ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–∞'.")
        else:
            st.info(f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–ª–æ–∫: **{block_name}**")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ session_state
        if st.button("–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã session_state"):
            self.show_all_session_state()

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–ª–æ–∫–∞
        self.input_form.render_parameters_section()  

        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Å–µ—Ç–∫–∏
        self.input_form.render_grid_type_selection()  

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        self.input_form.render_control_buttons()

    def show_all_session_state(self):
        """–í—ã–≤–æ–¥ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ session_state"""
        st.subheader("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ session_state")
        for key, value in st.session_state.items():
            st.write(f"**{key}**: {value}")

    def show_visualization(self):
        """
        –≠–∫—Ä–∞–Ω –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –±–ª–æ–∫–∞, —Å–µ—Ç–∫–∏ –∏ –º–µ—Ç—Ä–∏–∫.
        """
        st.header("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –±–ª–æ–∫–∞ –∏ —Å–µ—Ç–∫–∏ —Å–∫–≤–∞–∂–∏–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–º–µ–Ω–∏ –±–ª–æ–∫–∞
        block_name = st.session_state.get("block_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–ª–æ–∫")

        if not block_name or block_name == "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–ª–æ–∫":
            st.warning("–ë–ª–æ–∫ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –±–ª–æ–∫ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–∞'.")
        else:
            st.info(f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–ª–æ–∫: **{block_name}**")

        st.info(f"–¢–∏–ø —Å–µ—Ç–∫–∏: {st.session_state.get('user_parameters', {}).get('grid_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏ —Å–∫–≤–∞–∂–∏–Ω
        if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–µ—Ç–∫–∏ —Å–∫–≤–∞–∂–∏–Ω"):
            self.grid_generator.generate_grid()
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –º–µ—Ç—Ä–∏–∫ —Å–µ—Ç–∫–∏
        if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫"):
            self.grid_generator.calculate_grid_metrics()

        # –ö–Ω–æ–ø–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        if st.button("–í–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—É—Ä –±–ª–æ–∫–∞"):
            self.visualizer.plot_block_contour()

        if st.button("–í–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç–∫—É —Å–∫–≤–∞–∂–∏–Ω"):
            self.visualizer.plot_drill_grid()

        if st.button("–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è"):
            self.visualizer.plot_combined()

        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        if st.button("–û—á–∏—Å—Ç–∏—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é"):
            self.visualizer.clear_visualization()

    def show_summary_screen(self):
        """
        –≠–∫—Ä–∞–Ω –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ–±–∑–æ—Ä–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Å–ª–µ–¥—É—é—â–∏–º —Ä–∞–∑–¥–µ–ª–∞–º.
        """
        st.title("–ò—Ç–æ–≥–æ–≤—ã–π –æ–±–∑–æ—Ä –±–ª–æ–∫–∞")
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–º–µ–Ω–∏ –±–ª–æ–∫–∞
        block_name = st.session_state.get("block_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–ª–æ–∫")

        if not block_name or block_name == "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–ª–æ–∫":
            st.warning("–ë–ª–æ–∫ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –±–ª–æ–∫ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–∞'.")
        else:
            st.info(f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–ª–æ–∫: **{block_name}**")
    
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if "user_parameters" in st.session_state and st.session_state["user_parameters"]:
            st.subheader("–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–ª–æ–∫–∞")
    
            # –û–±—Ö–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö, —Ç–∞–∫ –∏ –ø—Ä–æ—Å—Ç—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
            parameters = st.session_state["user_parameters"]
            if isinstance(parameters, dict):
                for group, params in parameters.items():
                    if isinstance(params, dict):
                        st.write(f"**{group}:**")
                        for param, value in params.items():
                            if isinstance(value, dict) and "value" in value and "description" in value:
                                st.write(f"- {param}: `{value['value']}` ({value['description']})")
                            else:
                                st.write(f"- {param}: `{value}`")
                    else:
                        st.write(f"- {group}: `{params}`")  # –ï—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–ª–æ—Å–∫–∞—è
            else:
                st.warning("–û—à–∏–±–∫–∞: `user_parameters` –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
    
        else:
            st.warning("–ù–µ—Ç —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    session_manager = SessionStateManager()
    logs_manager = LogsManager()
    data_input = DataInput(session_manager, logs_manager)
    st.sidebar.title("–ú–µ–Ω—é")
    option = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ —ç–∫—Ä–∞–Ω", ["–ò–º–ø–æ—Ä—Ç –±–ª–æ–∫–∞", "–í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", "–ò—Ç–æ–≥–æ–≤—ã–π –æ–±–∑–æ—Ä"])
    if option == "–ò–º–ø–æ—Ä—Ç –±–ª–æ–∫–∞":
        data_input.show_import_block()
    elif option == "–í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤":
        data_input.show_input_form()
    elif option == "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è":
        data_input.show_visualization()
    elif option == "–ò—Ç–æ–≥–æ–≤—ã–π –æ–±–∑–æ—Ä":
        data_input.show_summary_screen()
